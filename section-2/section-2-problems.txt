Compiled by the community TA team during the last run of Programming Languages on the old platform.

=== 38 Cons Cells ===

Write a function $$\verb|length_of_a_list|$$ that takes an arbitrary list ($$\verb|'a list|$$) and evaluates to its length as an integer number. Use pattern matching instead of list functions. Your function should be tail-recursive.
SIGNATURE: $$\verb|val length_of_a_list = fn : 'a list -> int|$$
EXAMPLE: $$\verb|length_of_a_list [1] = 1|$$

=== Pass/Fail ===

We'll do some of the old and boring "students and their grades" stuff. We'll use the following definitions to represent students and their grades:

    type student_id = int
    type grade = int (* must be in 0 to 100 range *)
    type final_grade = { id : student_id, grade : grade option }
    datatype pass_fail = pass | fail

Note that the grade might be absent (presumably because the student did not take the final exam).

=== Pass/Fail -- 1 ===

Write a function $$\verb|pass_or_fail|$$ that takes a $$\verb|final_grade|$$ and determines whether this particular student has passed or failed the class. The passing grade is 75 (inclusive) -- everyone with a grade equal to or above 75 passes. Students with no grade are considered to have failed the class. Your function should evaluate to a value of type $$\verb|pass_fail|$$. You may assume that the grade is correct (that is, in the specified range), and you do not need to validate the input.  Use pattern matching instead of option functions.
NOTE: Your signature may be a little different.
SIGNATURE: $$\verb|val pass_or_fail = fn : {grade:int option, id:'a} -> pass_fail|$$
EXAMPLE: $$\verb|pass_or_fail { id = 1023, grade = SOME 73 } = fail|$$

=== Pass/Fail -- 2 ===

Write a function $$\verb|has_passed|$$ that takes a $$\verb|final_grade|$$ and evaluates to a $$\verb|bool|$$ indicating whether the given student has passed the class. The rules for determining that are the same as in the previous problem. Use pattern matching instead of option functions.
HINT: You might want to use $$\verb|pass_or_fail|$$ here.
NOTE: Your signature may be a little different.
SIGNATURE: $$\verb|val has_passed = fn : {grade:int option, id:'a} -> bool|$$
EXAMPLE: $$\verb|has_passed { id = 1023, grade = SOME 73 } = false|$$

=== Pass/Fail -- 3 ===

Write a function $$\verb|number_passed|$$ that takes a list of $$\verb|final_grade|$$s and evaluates to a number of students on the list who have passed the class. The rules for determining that are still the same. You do not need to check whether all of the student IDs on the list are unique (though you may treat adding that to your implementation as a challenge problem).  Use pattern matching instead of list functions.
NOTE: Your signature may be a little different.
SIGNATURE: $$\verb|val number_passed = fn : {grade:int option, id:'a} list -> int|$$
EXAMPLE: $$\verb|number_passed [{ id = 1, grade = SOME 65 }, { id = 2, grade = SOME 82 }, { id = 3, grade = NONE }, { id = 5, grade = SOME 96 }] = 2|$$

=== Pass/Fail -- 4 ===

Write a function $$\verb|group_by_outcome|$$ that takes a list of $$\verb|final_grade|$$s and evaluates to a list of tuples consisting of no more than two elements. The resulting list should be empty if the original list was empty. If there are any students with a passing grade on the original list, the resulting list should contain a tuple with $$\verb|pass|$$ as the first element and the list of IDs of passing students as the second element. The IDs must be in the same order as they appear in the original list. Similarly, if there are any failing students on the list, the result should contain a tuple with $$\verb|fail|$$ for its first element and the list of IDs of failing students as its second element. Once again, the IDs must be in the same relative order as in the original list. Additionally, if there are both passing and failing students on the original list, the resulting list should contain $$\verb|(pass, ...)|$$ before $$\verb|(fail, ...)|$$. As usual, use pattern matching.
NOTE: Your signature may be a little different.
SIGNATURE: $$\verb|val group_by_outcome = fn : {grade:int option, id:'a} list -> (pass_fail * 'a list) list|$$
EXAMPLE: $$\verb|group_by_outcome [{ id = 1025, grade = NONE }, { id = 4, grade = SOME 99 }] = [(pass, [4]), (fail, [1025])]|$$

=== Forest For The Trees ===

To flex our mental muscles with algebraic data types and records a little, we'll work with binary trees. We'll use the following definition:

    datatype 'a tree = leaf | node of { value : 'a, left : 'a tree, right : 'a tree }

Thus a binary tree is a recusive data structure that is either a plain $$\verb|leaf|$$, or a $$\verb|node|$$ containing a value and two other trees of the same type. This parallels the definition of lists, but with two references to "following" elements.
Note that while this datatype can be used to build binary search trees, we're not assuming the existence of any invariant -- values in the nodes may be of any type and may be distributed arbitrarily.

=== Forest For The Trees -- 1 ===

Write a function $$\verb|tree_height|$$ that accepts an $$\verb|'a tree|$$ and evaluates to a height of this tree. The height of the tree is the length of the longest path to a $$\verb|leaf|$$ in this tree. Thus the height of a $$\verb|leaf|$$ is $$0$$.
SIGNATURE: $$\verb|val tree_height = fn : 'a tree -> int|$$
EXAMPLE: $$\verb|tree_height (node { value = 0, left = node { value = 0, left = node { value = 0, left = leaf, right = leaf }, right = leaf }, right = node { value = 0, left = leaf, right = leaf } }) = 3|$$

=== Forest For The Trees -- 2 ===

Write a function $$\verb|sum_tree|$$ that takes an $$\verb|int tree|$$ and evaluates to the sum of all values in the nodes.
SIGNATURE: $$\verb|val sum_tree = fn : int tree -> int|$$
EXAMPLE: $$\verb|sum_tree (node { value = 1, left = node { value = 2, left = node { value = 3, left = leaf, right = leaf }, right = leaf }, right = node { value = 4, left = leaf, right = leaf } }) = 10|$$

=== Forest For The Trees -- 3 ===

We'll define a simple datatype for this problem:

    datatype flag = leave_me_alone | prune_me

Write a function $$\verb|gardener|$$ takes takes $$\verb|flag tree|$$ and evaluates to a new tree of the same type, such that its structure is identical to the original tree, but all nodes marked with $$\verb|prune_me|$$ have been removed together with their descendant nodes and replaced with leaves.
SIGNATURE: $$\verb|val gardener = fn : flag tree -> flag tree|$$
EXAMPLE: $$\verb|gardener (node { value = leave_me_alone, left = node { value = prune_me, left = node { value = leave_me_alone, left = leaf, right = leaf }, right = leaf }, right = node { value = leave_me_alone, left = leaf, right = leaf } }) = node { value = leave_me_alone, left = leaf, right = node { value = leave_me_alone, left = leaf, right = leaf } }|$$

=== Back To The Future! ===

A few of the practice problems from previous week can be rewritten more elegantly using the material from this week. All problem statements, SIGNATURES and EXAMPLES remain the same, if there are any additional considerations, these will be mentioned below. Only some of the potentially eligible problems are included -- naturally, you're welcome to rewrite the rest on your own, using similar approaches.

=== GCD -- Redux ===

Write a function $$\verb|gcd_list|$$ following the specification from Week 2's "Greatest Common Divisor -- Continued" problem.  Use pattern matching instead of list functions. Use the following implementation of $$\verb|gcd|$$ as a helper function:

    fun gcd (a : int, b : int) =
        if a = b
        then a
        else
            if a < b
            then gcd (a, b - a)
            else gcd (a - b, b)

=== Element Of A List -- Redux ===

Write a function $$\verb|any_divisible_by|$$ following the specification from Week 2's "Element Of A List" problem.  Use pattern matching instead of list functions. Use the following implementation of $$\verb|is_divisible_by|$$ as a helper function:

    fun is_divisible_by (a : int, b : int) = a mod b = 0

=== Quirky Addition -- Redux (*) ===

Write a function $$\verb|add_opt|$$ following the specification from Week 2's "Quirky Addition" problem. Use pattern matching instead of option functions. You may and should use option constructors.

=== Quirky Addition -- Continued -- Redux (*) ===

Write a function $$\verb|add_all_opt|$$ following the specification from Week 2's "Quirky Addition -- Continued" problem. Use pattern matching instead of list and option functions.

=== Flip Flop -- Redux (*) ===

Write a function $$\verb|alternate|$$ following the specification from Week 2's "Flip Flop" problem. Use pattern matching instead of list functions.

=== Minimum/Maximum -- Redux (*) ===

Write a function $$\verb|min_max|$$ following the specification from Week 2's "Minimum/Maximum" problem. Use pattern matching instead of list functions.

=== Lists And Tuples, Oh My! - Redux ===

Write a function $$\verb|unzip|$$ following the specification from Week 2's "Lists And Tuples, Oh My!" problem. Use pattern matching instead of list functions.
NOTE: The type of your function is probably going to be more general that the one specified in the original problem.  That's totally fine -- awesome, actually!

=== BBCA -- Redux (*) ===

Write a function $$\verb|repeats_list|$$ following the specification from Week 2's "BananaBanana -- Continued (Again)" problem. Use pattern matching instead of list functions.
NOTE: The type of your function is probably going to be more general that the one specified in the original problem.  That's totally fine -- awesome, actually!

(*) Problems contributed by Charilaos Skiadas.
